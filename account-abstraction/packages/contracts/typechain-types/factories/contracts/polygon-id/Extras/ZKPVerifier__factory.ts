/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ZKPVerifier,
  ZKPVerifierInterface,
} from "../../../../contracts/polygon-id/Extras/ZKPVerifier";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getSupportedRequests",
    outputs: [
      {
        internalType: "uint64[]",
        name: "arr",
        type: "uint64[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
    ],
    name: "getZKPRequest",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "schema",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "operator",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "value",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "circuitId",
            type: "string",
          },
        ],
        internalType: "struct ICircuitValidator.CircuitQuery",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "requestQueries",
    outputs: [
      {
        internalType: "uint256",
        name: "schema",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slotIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "operator",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "circuitId",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "requestValidators",
    outputs: [
      {
        internalType: "contract ICircuitValidator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
      {
        internalType: "contract ICircuitValidator",
        name: "validator",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "schema",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "operator",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "value",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "circuitId",
            type: "string",
          },
        ],
        internalType: "struct ICircuitValidator.CircuitQuery",
        name: "query",
        type: "tuple",
      },
    ],
    name: "setZKPRequest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
      {
        internalType: "uint256[]",
        name: "inputs",
        type: "uint256[]",
      },
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    name: "submitZKPResponse",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "supportedRequests",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361174790816100618239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816337ba95231461115757508063715018a6146110bb5780638da5cb5b1461106957806396bf474114610fcb578063a872311414610f5c578063b45c0fdf14610ed0578063b68967e2146109f1578063c76d0845146108ac578063f14353261461084c578063f2fde38b146107175763fee207e61461009857600080fd5b34610712577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606081360112610712576100d06112f3565b9060243573ffffffffffffffffffffffffffffffffffffffff81168103610712576044359167ffffffffffffffff83116107125760a0908336030112610712576040519160a0830183811067ffffffffffffffff82111761055e57604052806004013583526024810135602084015260448101356040840152606481013567ffffffffffffffff81116107125761016d906004369184010161150c565b606084015260848101359067ffffffffffffffff8211610712573660238383010112156107125767ffffffffffffffff600483830101351161055e57604051916101e560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f600485870101350116018461144a565b81810160048101358085523691016024011161071257600481838260209460009601013560248383010185880137010135830101526080830152610227611616565b67ffffffffffffffff8316600052600360205273ffffffffffffffffffffffffffffffffffffffff60406000205416156106c1575b606082015167ffffffffffffffff84166000526002602052600360406000200181519167ffffffffffffffff831161055e5768010000000000000000831161055e5760209082548484558085106106a4575b500190600052602060002060005b8381106106905750505050604082015167ffffffffffffffff84166000526002602052600260406000200155608082015160046040600020019080519067ffffffffffffffff821161055e578190610314845461130a565b601f811161065e575b50602090601f83116001146105985760009261058d575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b608060208301519267ffffffffffffffff85166000526002602052600193846040600020015580516040600020550151926004604060002001845167ffffffffffffffff811161055e576020956103bd835461130a565b601f8111610523575b508690601f83116001146104795767ffffffffffffffff949392916000918361046e575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82881b9260031b1c19161790555b166000526003835273ffffffffffffffffffffffffffffffffffffffff604060002091167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055604051908152f35b0151905038806103ea565b93929186917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082169084600052896000209160005b81811061050c5750968367ffffffffffffffff98106104d5575b505050811b01905561041b565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806104c8565b8289015184558a9590930192918b01918b016104ae565b61054e908460005288600020601f850160051c8101918a8610610554575b601f0160051c01906116fa565b386103c6565b9091508190610541565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b015190503880610334565b9250836000526020600020906000935b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841685106106435760019450837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081161061060c575b505050811b019055610366565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806105ff565b818101518355602094850194600190930192909101906105a8565b61068a90856000526020600020601f850160051c8101916020861061055457601f0160051c01906116fa565b3861031d565b6001906020845194019381840155016102bc565b6106bb9084600052858460002091820191016116fa565b386102ae565b6004546801000000000000000081101561055e578060016106e592016004556115a7565b81549060031b9067ffffffffffffffff821b809267ffffffffffffffff8816901b1691191617905561025c565b600080fd5b346107125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107125761074e6114e9565b610756611616565b73ffffffffffffffffffffffffffffffffffffffff8091169081156107c857600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346107125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610712576004356004548110156107125767ffffffffffffffff61089c6020926115a7565b9190546040519260031b1c168152f35b34610712576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107125767ffffffffffffffff6108ed6112f3565b606060806040516108fd81611412565b600081526000868201526000604082015282808201520152166000526002815260406000206109ed60046109bc6040519361093785611412565b80548552600181015486860190815260028201549060408701918252610989604051936109728561096b81600385016116bd565b038661144a565b6060890194855261096b604051809881930161135d565b6080870194855260405197889781895251908801525160408701525160608601525160a0608086015260c0850190611573565b90517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160a085015261148b565b0390f35b34610712576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261071257610a296112f3565b60243567ffffffffffffffff811161071257610a4990369060040161150c565b36606312156107125760405191610a5f8361142e565b82608493368511610712576044905b858210610ec05750503660a3121561071257604051610a8c8161142e565b8036610104116107125785905b6101048210610e6e5750503661012312156107125760405192610abb8461142e565b83366101441161071257610104905b6101448210610e5e57505067ffffffffffffffff169485600052600360205273ffffffffffffffffffffffffffffffffffffffff90816040600020541615610ddc5786600052600260205260406000205415610d5b575090610b8394929186600052600360205260406000205416936002602052604060002091610b8e6040519788967f67e1d5040000000000000000000000000000000000000000000000000000000088526101406004890152610144880190611573565b946024870190611695565b6000606486015b60028210610d3357505050610c226020959360048694610bba869560e4870190611695565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc85840301610124860152805483526001810154898401526002810154604084015260a06060840152610c1360a08401600383016116bd565b9260808185039101520161135d565b03915afa908115610d2757600091610cec575b5015610c8e57336000526001602052604060002090600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556003602052602060405160018152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f70726f6f6620726573706f6e7365206973206e6f742076616c696400000000006044820152fd5b90506020813d602011610d1f575b81610d076020938361144a565b81010312610712575180151581036107125782610c35565b3d9150610cfa565b6040513d6000823e3d90fd5b829394959650604081610d4c6020936001959651611695565b01930191018795949392610b95565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f7175657279206973206e6f742073657420666f7220746869732072657175657360448201527f74206964000000000000000000000000000000000000000000000000000000006064820152fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f76616c696461746f72206973206e6f742073657420666f72207468697320726560448201527f71756573742069640000000000000000000000000000000000000000000000006064820152fd5b8135815260209182019101610aca565b36601f8301121561071257604051610e858161142e565b803660408501116107125783905b604085018210610eb0575050816020916040935201910190610a99565b8135815260209182019101610e93565b8135815260209182019101610a6e565b346107125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261071257610f076114e9565b6024359067ffffffffffffffff82168092036107125773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090600052602052602060ff604060002054166040519015158152f35b346107125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107125767ffffffffffffffff610f9c6112f3565b166000526003602052602073ffffffffffffffffffffffffffffffffffffffff60406000205416604051908152f35b346107125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107125767ffffffffffffffff61100b6112f3565b166000526002602052604060002080546109ed600460018401549361104660028201549161103f604051809581930161135d565b038361144a565b60405194859485526020850152604084015260806060840152608083019061148b565b346107125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261071257602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b346107125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610712576110f2611616565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346107125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610712576004548082526020918281019181848460046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b936000905b8060038301106112aa576111fe95549184828210611290575b828210611273575b828210611256575b5010611248575b509050939293038361144a565b604051928392818401908285525180915260408401929160005b82811061122757505050500390f35b835167ffffffffffffffff1685528695509381019392810192600101611218565b60c01c8152018590876111f1565b6001919467ffffffffffffffff8560801c168152019301846111ea565b6001919467ffffffffffffffff8560401c168152019301846111e2565b6001919467ffffffffffffffff85168152019301846111da565b92509250600160049185549067ffffffffffffffff918281168252828160401c168b83015260809281841c16604083015260c01c606082015201940192019284929387926111c1565b6004359067ffffffffffffffff8216820361071257565b90600182811c92168015611353575b602083101461132457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611319565b906000929180549161136e8361130a565b9182825260019384811690816000146113d05750600114611390575b50505050565b90919394506000526020928360002092846000945b8386106113bc57505050500101903880808061138a565b8054858701830152940193859082016113a5565b91505060209495507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009193501683830152151560051b0101903880808061138a565b60a0810190811067ffffffffffffffff82111761055e57604052565b6040810190811067ffffffffffffffff82111761055e57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761055e57604052565b919082519283825260005b8481106114d55750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201611496565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361071257565b9080601f830112156107125781359067ffffffffffffffff821161055e578160051b604051936020936115418584018761144a565b85528380860192820101928311610712578301905b828210611564575050505090565b81358152908301908301611556565b90815180825260208080930193019160005b828110611593575050505090565b835185529381019392810192600101611585565b906004548210156115e757600460005260188260021c7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b019260031b1690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff60005416330361163757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000915b600283106116a657505050565b600190825181526020809101920192019190611699565b90815480825260208092019260005281600020916000905b8282106116e3575050505090565b8354855293840193600193840193909101906116d5565b818110611705575050565b600081556001016116fa56fea2646970667358221220fca95c891a816397d04c80a33a76e91d0de82da5e890f59a8d343f059b107ae664736f6c63430008110033";

type ZKPVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKPVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKPVerifier__factory extends ContractFactory {
  constructor(...args: ZKPVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKPVerifier> {
    return super.deploy(overrides || {}) as Promise<ZKPVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ZKPVerifier {
    return super.attach(address) as ZKPVerifier;
  }
  override connect(signer: Signer): ZKPVerifier__factory {
    return super.connect(signer) as ZKPVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKPVerifierInterface {
    return new utils.Interface(_abi) as ZKPVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKPVerifier {
    return new Contract(address, _abi, signerOrProvider) as ZKPVerifier;
  }
}
