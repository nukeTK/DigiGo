/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VerificationResistory,
  VerificationResistoryInterface,
} from "../../../../contracts/polygon-id/PolygonId.sol/VerificationResistory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "connext_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "domainId",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    name: "BridgeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "CONNEXT_AMOUNT_FOR_NONE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CONNEXT_ASSET_FOR_NONE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TRANSFER_REQUEST_ID",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "bridges",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "connext",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupportedRequests",
    outputs: [
      {
        internalType: "uint64[]",
        name: "arr",
        type: "uint64[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
    ],
    name: "getZKPRequest",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "schema",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "operator",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "value",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "circuitId",
            type: "string",
          },
        ],
        internalType: "struct ICircuitValidator.CircuitQuery",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "requestQueries",
    outputs: [
      {
        internalType: "uint256",
        name: "schema",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slotIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "operator",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "circuitId",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "requestValidators",
    outputs: [
      {
        internalType: "contract ICircuitValidator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "domainId_",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    name: "setBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
      {
        internalType: "contract ICircuitValidator",
        name: "validator",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "schema",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "operator",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "value",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "circuitId",
            type: "string",
          },
        ],
        internalType: "struct ICircuitValidator.CircuitQuery",
        name: "query",
        type: "tuple",
      },
    ],
    name: "setZKPRequest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
      {
        internalType: "uint256[]",
        name: "inputs",
        type: "uint256[]",
      },
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    name: "submitZKPResponse",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "supportedRequests",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "destination",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "relayerFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sub",
        type: "address",
      },
    ],
    name: "sync",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "verified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "originSender",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "origin",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "xReceive",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080346100a757601f61260e38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600754161760075561254b90816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b60003560e01c80630b8931cb1461019a5780630db065f414610191578063140fdb0c1461018857806337ba95231461017f57806363ec508f1461017657806368b2ba681461016d578063715018a6146101645780638da5cb5b1461015b57806396bf474114610152578063a0f0a3121461012e578063a872311414610149578063b45c0fdf14610140578063b68967e214610137578063c34f6ec41461012e578063c76d084514610125578063de4b05481461011c578063f143532614610113578063f2fde38b1461010a578063fd614f41146101015763fee207e6146100f957600080fd5b61000e611367565b5061000e6112c7565b5061000e611109565b5061000e611084565b5061000e611001565b5061000e610f20565b5061000e610b18565b5061000e610da2565b5061000e610bc3565b5061000e610b53565b5061000e610a79565b5061000e6107f3565b5061000e610752565b5061000e61066e565b5061000e610633565b5061000e6104ab565b5061000e6102c2565b5061000e610253565b5061000e6101c9565b6004359063ffffffff8216820361000e57565b6084359063ffffffff8216820361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5763ffffffff6102066101a3565b166000526005602052602073ffffffffffffffffffffffffffffffffffffffff60406000205416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff6004356102a481610235565b166000526006602052602060ff604060002054166040519015158152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761041b60206103746103026101a3565b60643561030e81610235565b6103a061034861032e8463ffffffff166000526005602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b9160405194859187830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018552846109da565b6103de6103c56103c560075473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91604051958694859384937f8aac16ba000000000000000000000000000000000000000000000000000000008552604435913391600487016121ba565b0391602435905af18015610459575b61043057005b6104509060203d8111610452575b61044881836109da565b8101906121ab565b005b503d61043e565b61046161172d565b61042a565b6020908160408183019282815285518094520193019160005b82811061048d575050505090565b835167ffffffffffffffff168552938101939281019260010161047f565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576040805160048054808352909290602083016004600052907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6000955b8260038801106105c95750916105609585926105569454918181106105ae575b818110610591575b818110610572575b10610564575b5003836109da565b5191829182610466565b0390f35b60c01c81526020013861054e565b608083901c67ffffffffffffffff168452926001906020019301610548565b82871c67ffffffffffffffff168452926001906020019301610540565b67ffffffffffffffff83168452926001906020019301610538565b60018294829893549061062867ffffffffffffffff926105f48385831667ffffffffffffffff169052565b67ffffffffffffffff818b1c851616602084015267ffffffffffffffff608082811c90951616838b015260c01c6060830152565b019401910195610518565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405160018152f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576106a66101a3565b63ffffffff602435916106b883610235565b6106c0611468565b1673ffffffffffffffffffffffffffffffffffffffff600092828452600560205261072981604086209073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b16907fb95f7bd4ed333200a22dcfdd4921bfe48e8abc90a7d14f82334e7946479db8398380a380f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107f05761078b611468565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6004359067ffffffffffffffff8216820361000e57565b90600182811c921680156108a6575b602083101461087757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f169161086c565b90600092918054916108c18361085d565b91828252600193848116908160001461092357506001146108e3575b50505050565b90919394506000526020928360002092846000945b83861061090f5750505050010190388080806108dd565b8054858701830152940193859082016108f8565b91505060209495507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009193501683830152151560051b010190388080806108dd565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176109b157604052565b6109b9610965565b604052565b6040810190811067ffffffffffffffff8211176109b157604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109b157604052565b919082519283825260005b848110610a655750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610a26565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff610aba610846565b166000526002602052604060002080546105606004600184015493610af5600282015491610aee60405180958193016108b0565b03836109da565b604051948594855260208501526040840152608060608401526080830190610a1b565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405160008152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff610b94610846565b166000526003602052602073ffffffffffffffffffffffffffffffffffffffff60406000205416604051908152f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610bff81610235565b60243567ffffffffffffffff8116810361000e57610c5760ff9173ffffffffffffffffffffffffffffffffffffffff602094166000526001845260406000209067ffffffffffffffff16600052602052604060002090565b54166040519015158152f35b9080601f8301121561000e5781359067ffffffffffffffff8211610ccb575b8160051b60405193602093610c99858401876109da565b8552838086019282010192831161000e578301905b828210610cbc575050505090565b81358152908301908301610cae565b610cd3610965565b610c82565b806063121561000e5760405190610cee826109be565b81608491821161000e576044905b828210610d095750505090565b8135815260209182019101610cfc565b80610123121561000e5760405190610d30826109be565b8161014491821161000e57610104905b828210610d4d5750505090565b8135815260209182019101610d40565b9080601f8301121561000e5760405191610d76836109be565b82906040810192831161000e57905b828210610d925750505090565b8135815260209182019101610d85565b503461000e576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610ddb610846565b60243567ffffffffffffffff811161000e57610dfb903690600401610c63565b90610e0536610cd8565b913660a3121561000e57604092835191610e1e836109be565b6101048336821161000e576084905b828210610e5f5761056088610e4e89898989610e4836610d19565b9361179f565b905190151581529081906020820190565b60208891610e6d3685610d5d565b815201910190610e2d565b90815180825260208080930193019160005b828110610e98575050505090565b835185529381019392810192600101610e8a565b90610f1d91602081528151602082015260208201516040820152604082015160608201526080610eea606084015160a08385015260c0840190610e78565b9201519060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082850301910152610a1b565b90565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610560610f5b610846565b67ffffffffffffffff604091606060808451610f7681610995565b60008152600060208201526000868201528280820152015216600052600260205280600020906004610ff2825193610fad85610995565b80548552600181015460208601526002810154848601528351610fde81610fd7816003860161163c565b03826109da565b6060860152610fd7845180948193016108b0565b60808301525191829182610eac565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043560045481101561000e57602090600460005267ffffffffffffffff8160021c7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b015460c06040519360061b161c168152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561114581610235565b61114d611468565b73ffffffffffffffffffffffffffffffffffffffff80911680156111bf576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b92919267ffffffffffffffff82116112a9575b6040519161128c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846109da565b82948184528183011161000e578281602093846000960137010152565b6112b1610965565b611256565b906020610f1d928181520190610a1b565b503461000e5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760443561130381610235565b6064359061131082610235565b6113186101b6565b9060a4359167ffffffffffffffff831161000e573660238401121561000e576105609361135261135b943690602481600401359101611243565b926024356123c5565b604051918291826112b6565b503461000e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60608136011261000e576113a0610846565b90602435906113ae82610235565b6044359067ffffffffffffffff9081831161000e5760a090833603011261000e57604051916113dc83610995565b806004013583526024810135602084015260448101356040840152606481013582811161000e576114139060043691840101610c63565b6060840152608481013591821161000e5701913660238401121561000e576105609361144c611456943690602460048201359101611243565b60808401526119af565b60405190151581529081906020820190565b73ffffffffffffffffffffffffffffffffffffffff60005416330361148957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156114ee57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f76616c696461746f72206973206e6f742073657420666f72207468697320726560448201527f71756573742069640000000000000000000000000000000000000000000000006064820152fd5b1561157957565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f7175657279206973206e6f742073657420666f7220746869732072657175657360448201527f74206964000000000000000000000000000000000000000000000000000000006064820152fd5b9081602091031261000e5751801515810361000e5790565b6000915b6002831061162557505050565b600190825181526020809101920192019190611618565b90815480825260208092019260005281600020916000905b828210611662575050505090565b835485529384019360019384019390910190611654565b906116909096959396610140808452830190610e78565b936116a060209384840190611614565b6000606083015b60028210611710575050610f1d959650906116ca600494939260e0830190611614565b610120818603910152815484526001820154908401526002810154604084015260a0606084015261170160a084016003830161163c565b926080818503910152016108b0565b846040826117216001948d51611614565b019901910190976116a7565b506040513d6000823e3d90fd5b1561174157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f70726f6f6620726573706f6e7365206973206e6f742076616c696400000000006044820152fd5b9260209061196f95926118d6946117ed73ffffffffffffffffffffffffffffffffffffffff6117e561032e8a67ffffffffffffffff166000526003602052604060002090565b1615156114e7565b61181661180e8867ffffffffffffffff166000526002602052604060002090565b541515611572565b61184061183a61032e8967ffffffffffffffff166000526003602052604060002090565b83611ea0565b6118646103c561032e8967ffffffffffffffff166000526003602052604060002090565b916118bc6118868967ffffffffffffffff166000526002602052604060002090565b604051978896879586957f67e1d50400000000000000000000000000000000000000000000000000000000875260048701611679565b03915afa9081156119a2575b600091611974575b5061173a565b61194b611920826119073373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9067ffffffffffffffff16600052602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b6119698167ffffffffffffffff166000526003602052604060002090565b506120d9565b600190565b611995915060203d811161199b575b61198d81836109da565b8101906115fc565b386118d0565b503d611983565b6119aa61172d565b6118c8565b611b0690611aec61196f946119c2611468565b73ffffffffffffffffffffffffffffffffffffffff6119f861032e8567ffffffffffffffff166000526003602052604060002090565b1615611b46575b611a2d60608201516003611a278667ffffffffffffffff166000526002602052604060002090565b01611bfd565b60408101516002611a528567ffffffffffffffff166000526002602052604060002090565b01556080810190611a8482516004611a7e8767ffffffffffffffff166000526002602052604060002090565b01611cdf565b60208101516001611aa98667ffffffffffffffff166000526002602052604060002090565b015551611aca8467ffffffffffffffff166000526002602052604060002090565b55516004611a7e8467ffffffffffffffff166000526002602052604060002090565b67ffffffffffffffff166000526003602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b611b4f83611b54565b6119ff565b6004549068010000000000000000821015611bd9575b6001820180600455821015611bcc575b60046000528160021c7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b019160c083549160061b169167ffffffffffffffff9283811b93849216901b16911916179055565b611bd4611054565b611b7a565b611be1610965565b611b6a565b818110611bf1575050565b60008155600101611be6565b81519167ffffffffffffffff8311611c8b575b680100000000000000008311611c7e575b8154838355808410611c60575b50602080910191600052806000209060005b848110611c4e575050505050565b83518382015592810192600101611c40565b611c7890836000528460206000209182019101611be6565b38611c2e565b611c86610965565b611c21565b611c93610965565b611c10565b9190601f8111611ca757505050565b611cd3926000526020600020906020601f840160051c83019310611cd5575b601f0160051c0190611be6565b565b9091508190611cc6565b919091825167ffffffffffffffff8111611e08575b611d0881611d02845461085d565b84611c98565b602080601f8311600114611d61575081929394600092611d56575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b015190503880611d23565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831695611d9585600052602060002090565b926000905b888210611df057505083600195969710611db9575b505050811b019055565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611daf565b80600185968294968601518155019501930190611d9a565b611e10610965565b611cf4565b15611e1c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f566572696669636174696f6e5265736973746f72793a2073656e64657220696e60448201527f76616c69640000000000000000000000000000000000000000000000000000006064820152fd5b604051907f9f442afa000000000000000000000000000000000000000000000000000000008252602091828160048173ffffffffffffffffffffffffffffffffffffffff8098165afa90811561209a575b60009161206d575b50918082611cd3959460149451811015612060575b60051b0101518060081c9060081b907eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00007fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000007dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0084167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff84161760101b931691161760101c177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff7fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000082841b1691831c161777ffffffffffffffff0000000000000000ffffffffffffffff7fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008260401b169160401c16179060405191612046836109be565b8183528060801b9060801c17908201520151163314611e15565b612068611054565b611f0e565b908382813d8311612093575b61208381836109da565b810103126107f057505182611ef9565b503d612079565b6120a261172d565b611ef1565b604051906020820182811067ffffffffffffffff8211176120cc575b60405260008252565b6120d4610965565b6120c3565b67ffffffffffffffff600191160361212757336000526006602052611cd3604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f566572696669636174696f6e5265736973746f72793a2072657571657374206960448201527f6420696e76616c696400000000000000000000000000000000000000000000006064820152fd5b9081602091031261000e575190565b9160e09363ffffffff610f1d97969316845273ffffffffffffffffffffffffffffffffffffffff8092166020850152600060408501521660608301526000608083015260a08201528160c08201520190610a1b565b1561221657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4861736869436f6e6e657874416461707465723a20616d6f756e74206973206960448201527f6e76616c696400000000000000000000000000000000000000000000000000006064820152fd5b156122a157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4861736869436f6e6e657874416461707465723a20627269646765206973206960448201527f6e76616c696400000000000000000000000000000000000000000000000000006064820152fd5b1561232c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4861736869436f6e6e657874416461707465723a206d73672073656e6465722060448201527f697320696e76616c6964200000000000000000000000000000000000000000006064820152fd5b9081602091031261000e5751610f1d81610235565b9091929373ffffffffffffffffffffffffffffffffffffffff8093166124915761242861192094846124639561241e61032e6124899a6124086103c5991561220f565b63ffffffff166000526005602052604060002090565b921691161461229a565b61245461244d6103c560075473ffffffffffffffffffffffffffffffffffffffff1690565b3314612325565b602080825183010191016123b0565b73ffffffffffffffffffffffffffffffffffffffff166000526006602052604060002090565b610f1d6120a7565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4861736869436f6e6e657874416461707465723a20617373657420697320696e60448201527f76616c69640000000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220d18e9716c7f7a9cd05c6e11567ec1c15f568c73667994e5b76410530db4d6a9e64736f6c63430008110033";

type VerificationResistoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerificationResistoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerificationResistory__factory extends ContractFactory {
  constructor(...args: VerificationResistoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    connext_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VerificationResistory> {
    return super.deploy(
      connext_,
      overrides || {}
    ) as Promise<VerificationResistory>;
  }
  override getDeployTransaction(
    connext_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(connext_, overrides || {});
  }
  override attach(address: string): VerificationResistory {
    return super.attach(address) as VerificationResistory;
  }
  override connect(signer: Signer): VerificationResistory__factory {
    return super.connect(signer) as VerificationResistory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerificationResistoryInterface {
    return new utils.Interface(_abi) as VerificationResistoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerificationResistory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as VerificationResistory;
  }
}
